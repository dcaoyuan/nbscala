/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

/*
 * Definition of Scala Grammar Definition.
 * 
 * @author Caoyuan Deng
 */
module org.netbeans.modules.scala.core.rats.ParserScala;

import org.netbeans.modules.scala.core.rats.Character;
import org.netbeans.modules.scala.core.rats.Identifier;
import org.netbeans.modules.scala.core.rats.Keyword;
import org.netbeans.modules.scala.core.rats.Literal;
import org.netbeans.modules.scala.core.rats.Spacing;
import org.netbeans.modules.scala.core.rats.Symbol;
import org.netbeans.modules.scala.core.rats.Xml;

import org.netbeans.modules.scala.core.rats.State;

modify org.netbeans.modules.scala.core.rats.Xml;

option withLocation;

/* @Note: Modified productions should always be put at the beginning */

// ----- Modify XmlContent in Xml.rats
generic XmlContent +=
  <ScalaExpr> ScalaExpr
/ <XmlCDSect> ...
;

// ----- Modify XmlAttValue in Xml.rats
generic XmlAttValue +=
  <XmlAttValue> ...
/ <ScalaExpr>   ScalaExpr
;

// ----- Modify XmlCharData in Xml.rats
generic XmlCharData := xmlCharDataInScala;

/* @Note: If we modify xmlCharDataChar in Xml.rats, we cannot add transient */
transient String xmlCharDataInScala = xmlCharDataCharInScala+;
transient String xmlCharDataCharInScala =
  "{{"
/ "}}"
/ !( [<&] / "]]>" / [{}] ) _ 
;


/* @Note: We cannot consumer every token's tail whitespace (leave it for XmlExpr 
 * to detect a preceding whitespace, instead, we consumer every token's preceding
 * whitespace and ignore it. 
 */
generic XmlExpr =
  void:w       XmlElement
/ void:"(":sep XmlElement void:")":sep 
/ void:"{":sep XmlElement void:"}":sep
;

// ----- XmlPattern

generic XmlPattern = 
  void:w       XmlElementP
/ void:"(":sep XmlElementP void:")":sep 
/ void:"{":sep XmlElementP void:"}":sep
;

generic XmlContentP = 
  <ScalaPatterns> ScalaPatterns
/ <XmlCDSect>     XmlCDSect
/ <XmlPI>         XmlPI        
/ <XmlCharData>   XmlCharData
/ <XmlElement>    XmlElementP
/ <XmlReference>  XmlReference
/ <XmlComment>    XmlComment
;

generic XmlElementP =
  XmlEmptyElemTagP
/ XmlSTagP XmlContentP* XmlETag
;

transient generic XmlEmptyElemTagP = XmlLt XmlEmptyTagName XmlWs? XmlSlashGt ;
transient generic XmlSTagP = XmlLt XmlSTagName XmlWs? XmlGt ;

/* @DocError in ScalaReference: ScalaExpr ::= '{' expr '}' */
transient generic ScalaExpr     = void:"{":sep !( void:"{":sep ) Block    void:"}":sep !( void:"}":sep );
transient generic ScalaPatterns = void:"{":sep !( void:"{":sep ) Patterns void:"}":sep !( void:"}":sep );


// ----- Literal

generic Literal =
  SKIP ( "-":op )? FloatingPointLiteral 
/ SKIP ( "-":op )? IntegerLiteral
/ SKIP             BooleanLiteral
/ SKIP             NullLiteral          
/ SKIP             CharacterLiteral     
/ SKIP             StringLiteral        
/ SKIP             SymbolLiteral
;

transient generic BooleanLiteral = "true":key / "false":key;
transient generic NullLiteral = "null" ;

transient void SEMI = void:";":sep N* / N+ ;

transient generic QualId = Id ( void:".":sep Id )* ;
transient generic Ids    = Id ( void:",":sep Id )* ;

generic Path =
  StableId
/ ( Id void:".":sep )? ThisKey 
;

generic StableId = 
  ( Id void:".":sep )? ThisKey                  ( void:".":sep Id )* ( void:"." SKIP ErrorIdExpected )?
/ ( Id void:".":sep )? SuperKey ClassQualifier? ( void:".":sep Id )* ( void:"." SKIP ErrorIdExpected )?
/                      Id                       ( void:".":sep Id )* ( void:"." SKIP ErrorIdExpected )?
;

/* StableId may be followed by '{' '_' in Import, and "type", so should considerate this case */
transient generic ErrorIdExpected = !( [{_] / "type":key ) { yyValue = GNode.create("Error", "Id expected"); } ;

transient generic ClassQualifier = void:"[":sep Id void:"]":sep;

generic Type = 
  FunType
/ NotFunType
;

generic FunType =
  void:"(":sep ( void:"=>":key Type )? void:")":sep void:"=>":key Type @CallByNameFunType
/ InfixType void:"=>":key Type                                         @NormalFunType
;

/* in CaseClause, we should leave the latest "=>" for ( "=>" Block ) */
generic FunTypeInCaseClause =
  void:"(":sep ( void:"=>":key Type )? void:")":sep void:"=>":key ( NotFunType void:"=>":key )*
/ InfixType void:"=>":key ( NotFunType void:"=>":key )*
;

transient generic NotFunType = InfixType ExistentialClause? ;

transient generic ExistentialClause = "forSome":key void:"{":sep ExistentialDcl ( SEMI ExistentialDcl )* void:"}":sep;

transient generic ExistentialDcl = 
  void:"type":key TypeDcl
/ void:"val" :key ValDcl
;

generic InfixType = CompoundType InfixTypeRest* ;
generic InfixTypeRest = Id N? CompoundType ;

generic CompoundType = 
  AnnotType ( void:"with":key AnnotType )* Refinement?
/ Refinement
;

generic AnnotType = Annotation* SimpleType ;

generic SimpleType = 
  Path void:".":sep void:"type":key                 TypeArgs? ( void:"#":key Id )* @SimpleSingletonType
/ StableId                                          TypeArgs? ( void:"#":key Id )* @SimpleIdType
/ void:"(":sep Types ( void:",":sep )? void:")":sep TypeArgs? ( void:"#":key Id )* @SimpleTupleType
;

transient generic TypeArgs = void:"[":sep Types void:"]":sep ;

/* @DocError in ScalaReference: Type in Types can be "_" */
transient generic Types = ( Type / WildKey) ( void:",":sep ( Type / WildKey) )* ;

transient generic Refinement = N? void:"{":sep RefineStat? ( SEMI RefineStat? )* void:"}":sep ;

generic RefineStat = 
  void:"type":key TypeDef
/ Dcl
;

generic Ascription = 
  void:":":key CompoundType
/ void:":":key Annotation Annotation*
/ void:":":key "_":key "*":op
;

generic Expr = 
  ( Bindings / Id ) void:"=>":key Expr
/ NotFunExpr;

generic NotFunExpr = 
  void:"if"    :key void:"(":sep ENTER_NL_DISABLE Expr EXIT_NL_DISABLE void:")":sep N* Expr ( SEMI? void:"else":key Expr )?                  @IfExpr
/ void:"while" :key void:"(":sep ENTER_NL_DISABLE Expr EXIT_NL_DISABLE void:")":sep N* Expr                                                  @WhileExpr
/ void:"try"   :key void:"{":sep Block void:"}":sep ( void:"catch":key void:"{":sep CaseClauses void:"}":sep )? ( void:"finally":key Expr )? @TryExpr
/ void:"do"    :key Expr SEMI? void:"while":key void:"(":sep ENTER_NL_DISABLE Expr EXIT_NL_DISABLE void:")":sep                              @DoExpr
/ void:"for"   :key ( void:"(":sep Enumerators void:")":sep / void:"{":sep Enumerators void:"}":sep ) N* ( void:"yield":key )? Expr          @ForExpr
/ void:"throw" :key Expr         @ThrowExpr
/ void:"return":key Expr?        @ReturnExpr
/ SimpleExpr   void:"=":key Expr @AssignmentExpr
/ PostfixExpr  Ascription        @AscriptionExpr
/ PostfixExpr  void:"match":key void:"{":sep CaseClauses void:"}":sep  @MatchExpr
/ PostfixExpr
;

/*
generic AssignmentExpr = 
  ( SimpleExpr void:".":sep )? Id void:"=":key Expr
/ SimpleExpr ArgumentExprs void:"=":key Expr
;
*/

/* @DocError in ScalaReference: InfixExpr ( Id N? )? */
generic PostfixExpr = InfixExpr Id? ;

generic InfixExpr = PrefixExpr InfixExprRest* ;
generic InfixExprRest = Id N? PrefixExpr;

generic PrefixExpr = ( "-":op / "+":op / "~":op / "!":op )? SimpleExpr ;

/* @DocError in ScalaReference : There is non SimpleExpr with ( void:":":key Type ) */
generic SimpleExpr = 
  XmlExpr   TypeArgs?                Member* ( void:"." SKIP ErrorIdExpected )?                      
/ Literal   TypeArgs?                Member* ( void:"." SKIP ErrorIdExpected )?                       
/ Path      TypeArgs? ArgumentExprs? Member* ( void:"." SKIP ErrorIdExpected )? ( void:":":key Type )? 
/ WildKey   TypeArgs?                Member* ( void:"." SKIP ErrorIdExpected )?                          
/ ParenExpr TypeArgs?                Member* ( void:"." SKIP ErrorIdExpected )? ( void:":":key Type )? 
/ BlockExpr TypeArgs?                Member* ( void:"." SKIP ErrorIdExpected )?                          
/ NewExpr   TypeArgs?                Member* ( void:"." SKIP ErrorIdExpected )?                       
;

generic Member = 
  void:".":sep Id TypeArgs? ArgumentExprs?
/ ArgumentExprs // apply
/ WildKey;

transient generic NewExpr = 
  void:"new":key ( ClassTemplate / TemplateBody)
/ SKIP void:"new" SKIP ErrorClassTemplateExpected 
;

transient generic ErrorClassTemplateExpected = { yyValue = GNode.create("Error", "ClassTemplate expected"); } ;

transient generic Exprs = Expr ( void:",":sep Expr )*;

generic ArgumentExprs =
  ParenExpr
/ N? BlockExpr
;

generic ParenExpr = 
  void:"(":sep ENTER_NL_DISABLE
  ( Exprs ( void:",":sep )? )? 
  EXIT_NL_DISABLE void:")":sep 
;

generic BlockExpr = 
  void:"{":sep CaseClauses void:"}":sep
/ void:"{":sep Block       void:"}":sep
;

generic Block = 
  ENTER_NL_ENABLE 
  ( BlockStat SEMI )* ResultExpr?
  EXIT_NL_ENABLE 
;

transient generic BlockStat = 
  Import
/ ( "implicit":key / "lazy":key )* Def
/ LocalModifier* TmplDef
/ !ResultFunExpr NotFunExpr
/ 
;

generic ResultExpr =
  ResultFunExpr
/ NotFunExpr
;

generic ResultFunExpr = ( Bindings / ResultBinding ) void:"=>":key Block ;
/* @DocError in ScalaReference: Id void:":":key CompoundType */
generic ResultBinding = Id ( void:":":key CompoundType )? ;

transient generic Enumerators = Generator ( SEMI Enumerator )*;

transient generic Enumerator = 
  Generator
/ Guard
/ void:"val":key Pattern1 void:"=":key Expr
;

/* @Note "val" is deprecated */
transient generic Generator = ( void:"val":key )? Pattern1 void:"<-":key Expr Guard? ;

transient generic CaseClauses = CaseClause CaseClause* ;
/* @Hacking greedy Pattern will consumer latest "=>" to try to recognize as FunType,
 * we should leave lastest "=>" for Block by define a FunTypeInCaseClause 
 * 
 * A case token can begin a statement only if followed by a class or object token
 * @Todo nl in case clause
 */
generic CaseClause =   
  SKIP_N void:"case":key ENTER_NL_DISABLE
  ( ( VarId / "_":key ) void:":" :key FunTypeInCaseClause EXIT_NL_DISABLE Block
  / Pattern N* Guard?   void:"=>":key                     EXIT_NL_DISABLE Block 
  )
;

transient generic Guard = void:"if":key PostfixExpr ;

generic Pattern = 
  AlternatePattern
/ Pattern1 
;

transient generic AlternatePattern = Pattern1 void:"|":sep Pattern1 ( void:"|":sep Pattern1 )* ;

generic Pattern1 =
  TypedPattern
/ NoTypedPattern
;

generic TypedPattern =
  VarId   void:":":key Type
/ "_":key void:":":key Type
;

// ----- Pattern2
generic NoTypedPattern =
  AtPattern
/ Pattern3
;

generic AtPattern = VarId void:"@":key Pattern3 ;

generic Pattern3 = 
  SimplePattern InfixPatternTail InfixPatternTail*
/ SimplePattern;

transient generic InfixPatternTail = Id N? SimplePattern ;

/* @DocError in ScalaReference: "_":key */
generic SimplePattern =
  XmlPattern            @SimpleXmlPattern
/ "_":key ( "*":op )?   @SimpleWildcardPattern
/ Literal               @SimpleLiteralPattern
/ TuplePattern          @SimpleTuplePattern
/ StableId TuplePattern @SimpleCallPattern
/ StableId              @SimpleIdPattern
;

transient generic TuplePattern = void:"(":sep Patterns? void:")":sep ;

transient generic Patterns = 
  Pattern ( void:",":sep Pattern )* ( ",":sep "_":key "*":op / ",":sep )? 
/ "_":key "*":op
;

transient generic TypeParamClause = void:"[":sep VariantTypeParam ( void:",":sep VariantTypeParam )* void:"]":sep ;

transient generic FunTypeParamClause = void:"[":sep TypeParam ( void:",":sep TypeParam )* void:"]":sep ;

transient generic VariantTypeParam = ( "+":op / "-":op )? TypeParam ;

transient generic TypeParam = ( Id / WildKey ) TypeParamClause? ( void:">:":key Type )? ( void:"<:":key Type )? ( void:"<%":key Type )? ;

transient generic ParamClauses = ParamClause* ( N? void:"(":sep void:"implicit":key Params void:")":sep )? ;

transient generic ParamClause = N? void:"(":sep Params? void:")":sep ;

transient generic Params = Param ( void:",":sep Param )* ;

transient generic Param = Annotation* Id ( void:":":key ParamType )? ;

transient generic ParamType = 
  Type "*":op
/ Type
/ "=>":key Type
;

transient generic ClassParamClauses = ClassParamClause* ( N? void:"(":sep void:"implicit":key ClassParams void:")":sep )? ;

transient generic ClassParamClause = N? void:"(":sep ClassParams? void:")":sep ;

transient generic ClassParams = ClassParam ( void:",":sep ClassParam )* ;

transient generic ClassParam = Annotation* ( Modifier* ( void:"val":key / void:"var":key ) )? Id ( void:":":key ParamType )? ;

/* @DocError in ScalaReference: void:"(":sep Binding ( void:",":sep Binding )* void:")":sep */
transient generic Bindings = void:"(":sep Binding? ( void:",":sep Binding )* void:")":sep ;
transient generic Binding = Id ( void:":":key Type )? ;

generic Modifier = 
  LocalModifier
/ AccessModifier
/ "override":key
;

generic LocalModifier = 
  "abstract":key
/ "final"   :key
/ "sealed"  :key
/ "implicit":key
/ "lazy"    :key
;

transient generic AccessModifier = ( "private":key / "protected":key ) AccessQualifier? ;

transient generic AccessQualifier = void:"[":sep ( Id / ThisKey ) void:"]":sep ;

generic Annotation = "@":key AnnotationExpr N? ;

/* @DocError in ScalaReference: AnnotationExpr = Constr ( N? void:"{":sep NameValuePair* void:"}":sep )? */
generic AnnotationExpr = Constr ( N? void:"{":sep NameValuePairs* void:"}":sep )?;

generic NameValuePairs = NameValuePair ( void:",":sep NameValuePair )* ;
generic NameValuePair = void:"val":key Id void:"=":key PrefixExpr;

generic TemplateBody = N? void:"{":sep SelfType? TemplateStat ( SEMI TemplateStat )* void:"}":sep ;

generic TemplateStat = 
  Import
/ Annotation* Modifier* Def
/ Annotation* Modifier* Dcl
/ Expr
/ 
;

generic SelfType = 
  Id     ( void:":":key Type )? void:"=>":key
/ ThisKey  void:":":key Type    void:"=>":key
;

transient generic Import = 
  void:"import":key ImportExpr ( void:",":sep ImportExpr )* 
/ void:"import" SKIP ErrorStableIdExpected
;

transient generic ErrorStableIdExpected = { yyValue = GNode.create("Error", "StableId expected"); } ;

transient generic ImportExpr = StableId ( void:".":sep ( WildKey / ImportSelectors ) )?;

transient generic ImportSelectors = void:"{":sep ( ImportSelector void:",":sep )* ( ImportSelector / WildKey ) void:"}":sep ;

transient generic ImportSelector = Id ( void:"=>":key ( Id / WildKey ) )? ;

generic Dcl = 
  void:"val" :key ValDcl
/ void:"var" :key VarDcl
/ void:"def" :key FunDcl
/ void:"type":key N* TypeDcl
;

transient generic ValDcl = Ids      void:":":key Type ;
transient generic VarDcl = Ids      void:":":key Type ;
transient generic FunDcl = FunSig ( void:":":key Type )? ;

transient generic FunSig = Id FunTypeParamClause? ParamClauses ;

transient generic TypeDcl = Id TypeParamClause? ( void:">:":key Type )? ( void:"<:":key Type )? ;

generic PatVarDef = 
  void:"val":key ValDef
/ void:"var":key VarDef
;

generic Def = 
  PatVarDef
/ void:"def" :key FunDef
/ void:"type":key N* TypeDef
/ TmplDef
;

transient generic PatDef = NoTypedPattern ( void:",":sep NoTypedPattern )* ( void:":":key Type )? void:"=":key Expr ;

transient generic ValDef = PatDef ;

generic VarDef = 
  PatDef
/ Ids void:":":key Type "=":key "_":key
;

generic FunDef = 
  FunSig ( void:":":key Type )? void:"=":key Expr
/ FunSig N? void:"{":sep Block void:"}":sep
/ ThisKey ParamClause ParamClauses ( void:"=":key ConstrExpr / N? ConstrBlock ) @ConstructorFunDef
;

generic TypeDef = Id TypeParamClause? void:"=":key Type ;

generic TmplDef =
  ( "case":key )? void:"class" :key ClassDef
/ ( "case":key )? void:"object":key ObjectDef
/                 void:"trait" :key TraitDef
;

transient generic ClassDef  = Id TypeParamClause? Annotation* AccessModifier? ClassParamClauses ClassTemplateOpt ;
transient generic TraitDef  = Id TypeParamClause?                                               TraitTemplateOpt ;
transient generic ObjectDef = Id                                                                ClassTemplateOpt ;

generic ClassTemplateOpt = 
  Extends  ClassTemplate 
/ Extends? TemplateBody
/ 
;

generic TraitTemplateOpt =
  Extends  TraitTemplate 
/ Extends? TemplateBody
/ 
;

generic Extends = "extends":key / "<:":key ;

transient generic ClassTemplate = ( void:"{":sep EarlyDefs? void:"}":sep void:"with":key )? ClassParents TemplateBody? ;
transient generic TraitTemplate = ( void:"{":sep EarlyDefs? void:"}":sep void:"with":key )? TraitParents TemplateBody? ;

transient generic ClassParents = Constr    ( void:"with":key AnnotType )* ;
transient generic TraitParents = AnnotType ( void:"with":key AnnotType )* ;

transient generic Constr = AnnotType ArgumentExprs* ;

transient generic EarlyDefs = EarlyDef ( SEMI EarlyDef )* ;
transient generic EarlyDef = Annotation* Modifier* PatVarDef ;

generic ConstrExpr = 
  SelfInvocation
/ ConstrBlock
;

transient generic ConstrBlock = void:"{":sep SelfInvocation ( SEMI BlockStat )* void:"}":sep ;

transient generic SelfInvocation = ThisKey ArgumentExprs ArgumentExprs* ;

transient generic TopStatSeq = TopStat ( SEMI TopStat )* ;

generic TopStat = 
  Import
/ Packaging
/ Annotation* Modifier* TmplDef
/ 
;

transient generic Packaging = void:"package":key QualId N? void:"{":sep TopStatSeq void:"}":sep ;
transient generic Package   = void:"package":key QualId SEMI !( "{":sep );

public generic CompilationUnit = SKIP_N Package? TopStatSeq EOF;

